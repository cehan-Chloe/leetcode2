public class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        List<Integer> res = new ArrayList<>();
        if (nums == null || nums.length == 0 || k == 0) {
            return res;
        }
        
        // 1. store number-count pair in hashmap
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i ++) {
            if (!map.containsKey(nums[i])) {
                map.put(nums[i], 1);
            } else {
                map.put(nums[i], map.get(nums[i]) + 1);
            }
        }
        
        // 2. bucket sort -- use the count as index of array
        List<Integer>[] bucket = new List[nums.length + 1];
        for (int i: map.keySet()) {
            int count = map.get(i);
            if (bucket[count] == null) {
                bucket[count] = new ArrayList<>();
            }
            bucket[count].add(i);
        }
        // 3. get the element in inverse order
        for (int i = bucket.length - 1; i >= 0 && res.size() < k; i --) {
            if (bucket[i] != null){
                res.addAll(bucket[i]);
            }
        }
        return res;
    }
}
