public class Solution {
    // method 1
    // public List<String> readBinaryWatch(int num){
    //     List<String> res = new ArrayList<String>();
    //     for (int i = 0; i < 12; i ++){
    //         for (int j = 0; j < 60; j ++){
    //             if (Integer.bitCount(i) + Integer.bitCount(j) == num){
    //                 res.add(String.format("%d:%02d", i, j));
    //             }
    //         }
    //     }
    //     return res;
    // }
    
    // method 2 backtracking
    public List<String> readBinaryWatch(int num){
        List<String> res = new ArrayList<>();
        // two part, hours: i digits, minutes: nums-i digits
        int[] hArr = new int[]{8, 4, 2, 1};
        int[] minArr = new int[]{32, 16, 8, 4, 2, 1};
        for(int i = 0; i <= num; i++){
            List<Integer> hour = generateNum(hArr, i);
            List<Integer> minute = generateNum(minArr, num - i);
            for(int h: hour){
                if(h >= 12){
                    continue;
                }
                for(int m: minute){
                    if (m >= 60){
                        continue;
                    }
                    res.add(h + ":" + (m < 10? "0" + m: m));
                }
            }
        }
        return res;
    }
    
    public List<Integer> generateNum(int[] nums, int count){
        List<Integer> res = new ArrayList<>();
        helper(nums, count, 0, 0, res);
        return res;
    }
    
    public void helper(int[] nums, int count, int pos, int sum, List<Integer> res){
        if (count == 0){
            res.add(sum);
            return;
        }
        
        for(int i = pos; i < nums.length; i ++){
            helper(nums, count - 1, i + 1, sum + nums[i], res);
        }
    }
}
