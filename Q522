public class Solution {
    public int findLUSlength(String[] strs) {
        Map<String, Integer> map = new HashMap<>();
        for(int i = 0; i < strs.length; i ++){
            for(String s: getSubseqs(strs[i])){
                int count = map.containsKey(s) ? map.get(s) : 0;
                map.put(s, count + 1);
            }
        }
        int max = -1;
        for (String s: map.keySet()){
            int count = map.get(s);
            if (count == 1 && s.length() > max){
                max = s.length();
            }
        }
        return max;
    }
    // wrong anwser: because of wrong understanding of substring concept
    // public Set<String> getSubstring(String s){
    //     Set<String> set = new HashSet<>();
    //     for(int i = 0 ; i < s.length() ; i++ ){
    //         for(int j = 1 ; j <= s.length() - i ; j++ ){
    //             set.add(s.substring(i, i + j));
    //         }
    //     }
    //     return set;
    // }
    
    public static Set<String> getSubseqs(String s) {
        Set<String> res = new HashSet<>();
        if (s.length() == 0) {
             res.add("");
             return res;
        }
        Set<String> subRes = getSubseqs(s.substring(1));
        res.addAll(subRes);
        for (String seq : subRes) res.add(s.charAt(0) + seq);
        return res;
    }
}
