/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null){
            return head;
        }
        // 1. find mid listNode
        ListNode mid = findMid(head);
        ListNode rhead = mid.next;
        mid.next = null;
        
        // 2. sort left and right list seperately.
        head = sortList(head);
        rhead = sortList(rhead);
        
        // 3. merge sorted lists
        return merge(head, rhead);
    }
    
    // input: ListNode head
    // output: ListNode mid 
    public ListNode findMid(ListNode head){
        if (head == null){
            return head;
        }
        ListNode slow = head;
        ListNode fast = head.next;
        while(fast != null && fast.next != null){
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }
    
    // input: ListNode left head & ListNode right head
    // output: new head
    public ListNode merge(ListNode lhead, ListNode rhead){
        if (lhead == null){
            return rhead;
        }
        if (rhead == null){
            return lhead;
        }
        ListNode dummy = new ListNode(0);
        ListNode p = dummy;
        while (lhead != null && rhead != null){
            if (lhead.val < rhead.val){
                p.next = lhead;
                lhead = lhead.next;
            } else{
                p.next = rhead;
                rhead = rhead.next;
            }
            p = p.next;
        }
        if (lhead != null){
            p.next = lhead;
        }
        if (rhead != null){
            p.next = rhead;
        }
        return dummy.next;
    }
}
