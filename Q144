/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    // method 1: recursion
//     public List<Integer> preorderTraversal(TreeNode root) {
//         List<Integer> pre = new LinkedList<>();
//         if (root == null){
//             return pre;
//         }
//         preHelper(root, pre);
//         return pre;
//     }
//     public void preHelper(TreeNode root, List<Integer> pre) {
// 		if(root==null) return;
// 		pre.add(root.val);
// 		preHelper(root.left,pre);
// 		preHelper(root.right,pre);
// 	}

    // method 2: iterative
    public List<Integer> preorderTraversal(TreeNode root) {
		List<Integer> pre = new LinkedList<Integer>();
		if(root==null) return pre;
		Stack<TreeNode> tovisit = new Stack<TreeNode>();
		tovisit.push(root);
		while(!tovisit.empty()) {
			TreeNode visiting = tovisit.pop();
			pre.add(visiting.val);
			if(visiting.right!=null) tovisit.push(visiting.right);
			if(visiting.left!=null) tovisit.push(visiting.left);
		}
		return pre;
	}
}
