/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        // the first element of preorder array is the root of the tree
        // find the element in inorder array, index = k.
        // 0 ~ k - 1 is the left child tree and k + 1 ~ inorder.length - 1 is the right child tree
        // use a helper method to do recursion
        return helper(preorder, inorder, 0, 0, inorder.length - 1);
    }
    
    public TreeNode helper(int[] preorder, int[] inorder, int index, int inStart, int inEnd) {
        if (index > preorder.length || inStart > inEnd) {
            return null;
        }
        TreeNode root = new TreeNode(preorder[index]);
        int inIndex = 0; // Index of current root in inorder
        for (int i = inStart; i <= inEnd; i++) {
            if (inorder[i] == root.val) {
                inIndex = i;
            }
        }
        root.left = helper(preorder, inorder, index + 1, inStart, inIndex - 1);
        root.right = helper(preorder, inorder, index + inIndex - inStart + 1, inIndex + 1, inEnd);
        return root;
    }
}
