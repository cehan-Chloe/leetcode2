public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(candidates);
        helper(candidates, target, 0, new ArrayList<>(), res);
        return res;
    }
    private void helper(int[] candidates, int target, int pos, List<Integer> cur, List<List<Integer>> res){
        if (target == 0){
            List<Integer> tmp = new ArrayList<>(cur);
            res.add(tmp);
            return;
        }
        for (int i = pos; i < candidates.length; i ++){
            if (target - candidates[i] < 0){
                return;
            }
            cur.add(candidates[i]);
            helper(candidates, target - candidates[i], i + 1, cur, res);
            cur.remove(cur.size() - 1);
            while(i + 1 < candidates.length && candidates[i] == candidates[i + 1]){
                i ++;
            }
        }
    }
}
