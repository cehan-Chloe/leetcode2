public class Solution {
    public int divide(int dividend, int divisor) {
        // 1. sign + - 2. overflow 3. divisor == 0;
        if (divisor == 0){
            return Integer.MAX_VALUE;
        }
        if (dividend == 0){
            return 0;
        }
        int sign = 1;
        if (dividend > 0 && divisor < 0 || dividend < 0 && divisor > 0){
            sign = -1;
        }
        long ldividend = Math.abs((long)dividend);
        long ldivisor = Math.abs((long)divisor);
        long res = ldivide(ldividend, ldivisor);
        if (res >= Integer.MAX_VALUE){
            return sign == 1? Integer.MAX_VALUE: Integer.MIN_VALUE;
        }
        return (int)(res * sign);
    }
    
    public long ldivide(long ldividend, long ldivisor){
        // Time limit exceeded!
        // long ans = 0;
        // long sum = divisor;
        // while (sum <= dividend){
        //     sum += divisor;
        //     ans ++;
        // }
        // return ans;
        
        // use binary search ldividend > ldivisor make sure that ans >= 1, sum >= ldivisor
        // ans -> 1,2,4,2^n
        if (ldividend < ldivisor){
            return 0;
        }
        long ans = 1;
        long sum = ldivisor;
        while(sum + sum <= ldividend){
            sum += sum;
            ans += ans;
        }
        return ans + ldivide(ldividend - sum, ldivisor);
    }
}
