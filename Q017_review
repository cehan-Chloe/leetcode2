public class Solution {
    // public List<String> letterCombinations(String digits) {
    //     List<String> res = new ArrayList<>();
    //     if (digits == null || digits.length() == 0){
    //         return res;
    //     }
        // method 1: straght-forward
        // res.add("");
        // String[] phoneNums = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        // for(int i = 0; i < digits.length(); i ++){
        //     List<String> tmp = new ArrayList<>();
        //     String cur = phoneNums[digits.charAt(i) - '0'];
        //     for (int m = 0; m < cur.length(); m ++){
        //         for (int n = 0; n < res.size(); n ++){
        //             tmp.add(res.get(n) + cur.charAt(m));
        //         }
        //     }
        //     res = tmp;
        // }
        // return res;      
        // }
    // method 2: recursive backtracking
    String[] phoneNums = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
    public List<String> letterCombinations(String digits) {
        List<String> res = new ArrayList<>();
        
        if (digits == null || digits.length() == 0){
            return res;
        }
        helper(digits, 0, "", res);
        return res;
    }
    
    public void helper(String digits, int index, String tmp, List<String> res){
        if (index == digits.length()){
            res.add(tmp);
            return;
        }
        String cur = phoneNums[digits.charAt(index) - '0'];
        for (int i = 0; i < cur.length(); i ++){
            helper(digits, index + 1, tmp + cur.charAt(i), res);
        }
    }
}
