public class Solution {
    public int longestSubstring(String s, int k) {
        if (s == null || s.length() == 0 || s.length() < k) {
            return 0;
        }
        return helper(s, k, 0, s.length());
    }
    public int helper(String s, int k, int start, int end) {
        if (end - start < k) {
            return 0;
        }
        int[] count = new int[26];
        for (int i = start; i < end; i ++) {
            count[s.charAt(i) - 'a'] ++;
        }
        for (int i = 0; i < 26; i ++) {
            if (count[i] > 0 && count[i] < k) {
                for (int j = start; j < end; j ++) {
                    if (s.charAt(j) == 'a' + i) {
                        return Math.max(helper(s, k, start, j), helper(s, k, j + 1, end));
                    }
                }
            }
        }
        return end - start;
    }
}
