public class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        if (s.length() == 0) {
            return res;
        }
        helper(s, new ArrayList<>(), res);  
        return res;
    }
    
    public void helper(String s, List<String> cur, List<List<String>> res) {
        if (s.length() == 0) {
            List<String> tmp = new ArrayList<>(cur);
            res.add(tmp);
            return;
        }
        for (int i = 0; i < s.length(); i ++) {
            if (isPalindrome(s.substring(0,i + 1))) {
                cur.add(s.substring(0,i + 1));
                helper(s.substring(i + 1), cur, res);
                cur.remove(cur.size() - 1);
            }
        }
    }
    
    public boolean isPalindrome(String s) {
        int start = 0;
        int end = s.length() - 1;
        while (start < end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start ++;
            end --;
        }
        return true;
    }
}
