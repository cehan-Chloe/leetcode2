public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        List<Integer> index = new ArrayList<>();
        Arrays.sort(nums);
        helper(nums, nums.length, list, index, res);
        return res;
    }
    
    private void helper(int nums[], int count, List<Integer> list, List<Integer> index, List<List<Integer>> res){
        if (count == 0){
            List<Integer> tmp = new ArrayList<>(list);
            res.add(tmp);
            return;
        }
        for (int i = 0; i < nums.length; i ++){
            if (index.contains(i)){
                continue;
            }
            index.add(i);
            list.add(nums[i]);
            helper(nums, count - 1, list, index, res);
            while(i + 1 < nums.length && nums[i] == nums[i + 1]){
                i ++;
            }
            list.remove(list.size() - 1);
            index.remove(index.size() - 1);
        }
    }
}
