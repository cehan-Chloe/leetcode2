/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        if (intervals == null || intervals.size() == 0){
            return intervals;
        }
        // 1. sort the array
        List<Interval> res = new ArrayList<>();
        Comparator<Interval> comp = new Comparator<Interval>(){
            @Override
            public int compare(Interval interval1, Interval interval2){
                return interval1.start - interval2.start;
            }
        };
        
        Collections.sort(intervals, comp);
        
        // 2. find the overlapping
        int start = intervals.get(0).start;
        int end = intervals.get(0).end;
        for(Interval i: intervals){
            // should be <=
            if (i.start <= end){
                end = Math.max(i.end, end);
            } else{
                Interval tmp = new Interval(start, end);
                res.add(tmp);
                start = i.start;
                end = i.end;
            }
        }
        
        // 3. add the last start end pair
        res.add(new Interval(start, end));
        return res;
    }
}



/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        if (intervals == null || intervals.size() == 0) {
            return intervals;
        }
        List<Interval> res = new ArrayList<>();
        Comparator<Interval> comp = new Comparator<Interval>(){
            @Override
            public int compare(Interval interval1, Interval interval2) {
                return interval1.start - interval2.start;
            }
        };
        Collections.sort(intervals, comp);
        int start = intervals.get(0).start;
        int end = intervals.get(0).end;
        for (Interval i: intervals) {
            if (i.start <= end) {
                end = Math.max(end, i.end);
            } else {
                Interval tmp = new Interval(start, end);
                res.add(tmp);
                start = i.start;
                end = i.end;
            }
        }
        res.add(new Interval(start, end));
        return res;
    }
}
