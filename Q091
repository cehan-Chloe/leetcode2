public class Solution {
    public int numDecodings(String s) {
        // if (s == null || s.length() == 0) {
        //     return 0;
        // }
        // int index = 0;
        // while (index < s.length()) {
        //     if (s.charAt(index) == '0') {
        //         index ++;
        //     } else {
        //         break;
        //     }
        // }
        // if (index == s.length()) {
        //     return 0;
        // }
        // s = s.substring(index --, s.length());
        // if (s.length() == 1) {
        //     if (s.charAt(0) == '0'){
        //         return 0;
        //     }
        //     return 1;
        // }
        // int[] dp = new int[s.length()];
        // dp[0] = 1;
        // dp[1] = 1;
        // if (s.charAt(1) != '0' && s.charAt(1) - '0' + (s.charAt(0) - '0') * 10 <= 26) {
        //     dp[1] = 2;
        // }
        // for (int i = 2; i < s.length(); i ++) {
        //     if (s.charAt(i) == '0') {
        //         continue;
        //     }
        //     if (s.charAt(i) - '0' + (s.charAt(i - 1) - '0') * 10 <= 26) {
        //         dp[i] = dp[i - 1] + dp[i - 2];
        //     }  
        //     else {
        //         dp[i] = dp[i - 1];
        //     }
        // }
        // return dp[s.length() - 1];
        int n = s.length();
        if (n == 0) return 0;
        
        int[] memo = new int[n+1];
        memo[n]  = 1;
        memo[n-1] = s.charAt(n-1) != '0' ? 1 : 0;
        
        for (int i = n - 2; i >= 0; i--)
            if (s.charAt(i) == '0') continue;
            else memo[i] = (Integer.parseInt(s.substring(i,i+2))<=26) ? memo[i+1]+memo[i+2] : memo[i+1];
        
        return memo[0];
    }
}
